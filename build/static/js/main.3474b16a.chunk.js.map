{"version":3,"sources":["firebase.js","components/SidebarChat.js","components/StateProvider.js","components/Sidebar.js","components/Chat.js","components/Reducer.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","onClick","e","preventDefault","roomName","prompt","add","to","Avatar","src","Math","floor","random","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Sidebar","rooms","setRooms","user","unsubscribe","photoURL","IconButton","type","placeholder","room","key","Chat","input","setInput","setRoomName","roomId","useParams","moment","Date","length","timestamp","toDate","format","displayName","href","onChange","target","console","log","FieldValue","serverTimestamp","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","result","catch","error","alert","msg","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3474b16a.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDValc2nGfWYlb2CAAqlMr6VERUbLuIYIs\",\r\n    authDomain: \"whatsapp-clone-c7e59.firebaseapp.com\",\r\n    databaseURL: \"https://whatsapp-clone-c7e59.firebaseio.com\",\r\n    projectId: \"whatsapp-clone-c7e59\",\r\n    storageBucket: \"whatsapp-clone-c7e59.appspot.com\",\r\n    messagingSenderId: \"362363873855\",\r\n    appId: \"1:362363873855:web:1da72fadb4afa749fa268a\",\r\n    measurementId: \"G-JR2WVYRLB5\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {auth, provider};\r\nexport default db;","import React, { useState } from 'react';\r\nimport { Avatar } from '@material-ui/core';\r\nimport \"../SidebarChat.css\";\r\nimport db from '../firebase';\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n    \r\n    const [messages, setMessages] = useState(\"\");\r\n    \r\n    useEffect(() => {\r\n        if(id){\r\n            db.collection(\"rooms\").doc(id).collection(\"messages\").orderBy(\"timestamp\" , \"desc\").onSnapshot(snapshot =>{\r\n                setMessages(snapshot.docs.map(doc => doc.data()));\r\n            });\r\n        }\r\n    }, [id]);\r\n\r\n\r\n    const creatNewChat = (e) =>{\r\n        e.preventDefault();\r\n        const roomName = prompt(\"Please enter name for  chat room s\");\r\n\r\n        if (roomName){\r\n            db.collection(\"rooms\").add({\r\n                name: roomName,\r\n            })\r\n        }\r\n    };\r\n\r\n    return !addNewChat ? (\r\n        <Link to={`/rooms/${id}`}>\r\n            <div className = \"sidebarChat\">\r\n                <Avatar src={`https://avatars.dicebear.com/api/avataaars/${Math.floor(Math.random() * 5000)}.svg`}/>\r\n                <div className=\"sidebarChat_info\">\r\n                    <h2>{name}</h2>\r\n                    <p>{messages[0]?.message}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    ) : (<div className = \"sidebarChat\" onClick = {creatNewChat}>\r\n                <h2>Add New Chat</h2>\r\n        </div>)\r\n        \r\n}\r\n\r\nexport default SidebarChat;\r\n","import React,{createContext, useReducer, useContext} from 'react';\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({reducer, initialState, children}) => (\r\n\r\n    <StateContext.Provider value = {useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext); \r\n","import React, { useState, useEffect } from 'react';\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport { useStateValue } from './StateProvider';\r\n\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\n\r\nimport db from '../firebase';\r\nimport \"../Sidebar.css\";\r\n\r\nfunction Sidebar() {\r\n    const [rooms, setRooms] = useState([]);\r\n    \r\n    const [{ user }, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection(\"rooms\").onSnapshot(snapshot => (\r\n            setRooms(snapshot.docs.map(doc =>({\r\n                id: doc.id,\r\n                data: doc.data(),\r\n            })\r\n            ))\r\n        ));\r\n\r\n        return() => {\r\n            unsubscribe();\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div className = \"sidebar\">\r\n            <div className = \"sidebar_header\">\r\n                    <Avatar src={user?.photoURL}/>   \r\n                <div className=\"sidebar_headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon/>\r\n                    </IconButton> \r\n                    <IconButton>\r\n                        <ChatIcon/>\r\n                    </IconButton> \r\n                    <IconButton>\r\n                        <MoreVertIcon/>\r\n                    </IconButton> \r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar_search\">\r\n                <div className=\"sidebar_searchContainer\">\r\n                    <SearchOutlinedIcon/>\r\n                    <input type=\"text\" placeholder = \"search or start new chat\"/>\r\n                </div>                \r\n            </div>\r\n            <div className=\"sidebar_chat\">\r\n                <SidebarChat addNewChat/>\r\n                {rooms.map(room => (\r\n                    <SidebarChat \r\n                        key= {room.id}\r\n                        id = {room.id}\r\n                        name = {room.data.name} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\nexport default Sidebar;","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport moment from \"moment\";\r\nimport \"../Chat.css\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction Chat() {\r\n    const [input, setInput] = useState(\"\");\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const { roomId } = useParams();\r\n    const [messages, setMessages] = useState([]);\r\n    const [{ user }, dispatch] = useStateValue();\r\n    \r\n    useEffect(() => {\r\n        if(roomId){\r\n            db.collection(\"rooms\").doc(roomId).onSnapshot(snapshot => (\r\n                setRoomName(snapshot.data().name)\r\n            ));\r\n\r\n            db.collection(\"rooms\").doc(roomId).collection(\"messages\").orderBy(\"timestamp\", \"asc\").onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            ));\r\n        }        \r\n    }, [roomId]);\r\n\r\n\r\n    const sendMessage = (e) =>{\r\n        e.preventDefault();\r\n        console.log(\"You wrote this: =>\", input);\r\n\r\n        db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n            message:input,\r\n            name: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        })\r\n        setInput(\"\");\r\n    }\r\n    return (\r\n        <div className =\"chat\"> \r\n            <div className=\"chat_header\">\r\n                <IconButton>\r\n                    <Avatar src={`https://avatars.dicebear.com/api/avataaars/${Math.floor(Math.random() * 5000)}.svg`}/>\r\n                </IconButton>\r\n                <div className=\"chat_headerInfo\">\r\n                    <h3>{roomName}</h3>\r\n                    <p>\r\n                        last seen{\" \"}\r\n                        {\r\n                            moment(Date(messages[messages.length - 1]?.timestamp?.toDate())).format('LT')\r\n                        }\r\n\r\n                    </p>\r\n                </div>\r\n                <div className=\"chat_headerRight\">\r\n                    <IconButton>\r\n                        <SearchOutlinedIcon/>\r\n                    </IconButton> \r\n                    <IconButton>\r\n                        <AttachFileIcon/>\r\n                    </IconButton> \r\n                    <IconButton>\r\n                        <MoreVertIcon/>\r\n                    </IconButton> \r\n                </div>\r\n            </div>\r\n            <div className=\"chat_body\">\r\n                { messages.map((message) => (\r\n                    <div  className={`chat_message ${message.name === user.displayName &&\"chat_receiver\"}`}>\r\n                        <div className = {`message_body ${message.name === user.displayName &&\"chat_receiverBody\"}`}>\r\n                        <div className=\"message_header\">\r\n                            <span><a href=\"fb.com\" >{message.name}</a></span>\r\n                        </div>\r\n                        <div className=\"message_context\" >\r\n                            <span className=\"message_data\">\r\n                                {message.message}\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"message_timestamp\">\r\n                            <span >{moment(Date(message.timestamp?.toDate())).format('LT')}</span>\r\n                        </div>\r\n                    </div>\r\n                   </div>\r\n                ))}                              \r\n            </div>\r\n            <div className=\"chat_footer\">\r\n                <IconButton>\r\n                    <InsertEmoticonIcon/>\r\n                </IconButton>\r\n                <div className=\"chat_input\">\r\n                    <form className=\"input_form\">\r\n                        <input type=\"text\" placeholder =\"Type a message\" \r\n                        id=\"message_input\" \r\n                        value={input}\r\n                        onChange ={(e) => setInput(e.target.value)}/>\r\n                        <button type=\"submit\" onClick={sendMessage}>Send a message</button>\r\n                    </form>   \r\n                </div>\r\n                <IconButton>\r\n                    <MicIcon/>\r\n                </IconButton>       \r\n            </div>                     \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","export const initialState = {\r\n    user: null,\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\" ,\r\n}\r\n\r\n\r\nconst reducer = (state, action) => {\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user,  \r\n            };    \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport \"../Login.css\";\r\nimport { auth, provider } from '../firebase';\r\nimport { useStateValue } from './StateProvider';\r\nimport { actionTypes } from './Reducer';\r\n\r\nfunction Login() { \r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider).then((result) => {\r\n            dispatch({\r\n                type: actionTypes.SET_USER,\r\n                user: result.user,\r\n            })\r\n        }).catch((error) => alert(error.msg));\r\n    };\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_container\">\r\n                <div className=\"login_inner\">\r\n                    <div className=\"login_front\">\r\n                        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/WhatsApp.svg/100px-WhatsApp.svg.png\" alt=\"whatsapp icon\"/>\r\n                        <div className=\"login_text\">\r\n                            <h1>Sign in to Whatsapp</h1>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"login_back\">\r\n                        <Button onClick = {signIn}>Sign in with Google</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport './App.css';\nimport Sidebar from \"./components/Sidebar\";\nimport Chat from './components/Chat';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Login from './components/Login';\nimport { useStateValue } from './components/StateProvider';\n\n\nfunction App() {\n   const [{ user }, dispatch] = useStateValue();\n\n  return (\n    //BEM naming convention\n    <div className=\"app\">\n      { !user ? (<Login/>) : (\n        <div className = \"app_body\">\n        <Router>\n          <Sidebar/>\n          <Switch>\n            <Route path=\"/rooms/:roomId\">  \n              <Chat/>\n            </Route>\n            <Route path=\"/\">\n              <Chat/>\n            </Route>\n          </Switch>\n        </Router>    \n      </div>\n    )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from './components/Reducer';\nimport { StateProvider } from './components/StateProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}